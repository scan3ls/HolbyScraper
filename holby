#!/usr/bin/python3
"""
    Scrape and parse html file
    to setup holberton project directories
"""


def usage(argv):
    """
    --------------
    Method: usage
    --------------
    Description:
        Check if script is run with the
        proper number of arguments
    Args:
        @argv: List of Strings
            list of arguments retrieved
            from sys
    --------------
    """

    if len(argv) != 2:
        print("Usage: ./main.py <project number>")
        exit(1)

def get_html(proj_num):
    """
    --------------
    Method: get_html
    --------------
    Description:
        Download project page as Html and
        Return a list of lines
    Args:
        @proj_num: Integer as String
            Desired holberton project number
    --------------
    """

    scraper = Scraper()
    return scraper.scrape(proj_num)

def parse_html(html):
    """
    --------------
    Method: parse_html
    --------------
    Description:
        Traverse html and
        Retrive desired data
    Args:
        @html: List of Strings
            Line by Line html data
    --------------
    """

    parser = Parser(html)
    html_data = {
        "learning_objectives": parser.get_objectives(),
        "project_directory": parser.get_proj_dir(),
        "project_files": parser.get_files()
    }
    return (html_data)

if __name__ == "__main__":
    from __init__ import *

    usage(argv)
    proj_num = argv[1]

    html = get_html(proj_num)
    html_data= parse_html(html)

    learn_objectives = html_data["learning_objectives"]
    proj_dir = html_data["project_directory"]
    files = html_data["project_files"]
    pwd = getcwd()
    
    fb_data = {
        "pwd": pwd,
        "proj_dir": proj_dir,
        "files": files
    }
    fb = FileBuilder(fb_data)
    fb.create_files()

    md_data = {
        "file_name": "{}/README".format(proj_dir),
        "learn_objectives": learn_objectives,
        "files": files
    }

    readme = MDWriter(md_data)
